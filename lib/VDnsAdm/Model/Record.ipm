package VDnsAdm::Model::Record;

use Moose;
use namespace::autoclean;

use Carp;

use VWebAdm::DB '@VERSION@';
use VWebAdm::Utils '@VERSION@';

extends 'VWebAdm::Model';

has 'valid_types' => (
    'is'      => 'ro',
    'isa'     => 'HashRef',
    'lazy'    => 1,
    'builder' => '_init_valid_types',
);

sub _init_fields {
    return [qw(id domain_id name type content ttl prio change_date ordername auth)];
}

sub _init_valid_types {
    my $self = shift;

    my $tref = {
        'A' => sub {
            my ( $content, $ttl, $prio ) = @_;

            # TODO validate
            return;
        },
        'AAAA'   => '',
        'AFSDB'  => '',
        'CERT'   => '',
        'CNAME'  => '',
        'DNSKEY' => '',
        'DS'     => '',
        'HINFO'  => '',
        'KEY'    => '',
        'LOC'    => '',
        'MX'     => '',
        'NAPTR'  => '',
        'NS'     => '',
        'NSEC'   => '',
        'PTR'    => '',
        'RP'     => '',
        'RRSIG'  => '',
        'SOA'    => '',
        'SPF'    => '',
        'SSHFP'  => '',
        'SRV'    => '',
        'TXT'    => '',
    };

    return $tref;
}

sub types {
    my $self = shift;

    return sort keys %{ $self->valid_types() };
}

sub _valid_type {
    my $self = shift;
    my $type = shift;

    if ( defined( $self->valid_types()->{$type} ) ) {
        return 1;
    }
    return;
}

sub _valid_content {
    my $self    = shift;
    my $type    = shift;
    my $content = shift;
    my $ttl     = shift;
    my $prio    = shift;

    if ( defined( $self->valid_types()->{$type} ) && ref( $self->valid_types()->{$type} ) eq 'CODE' ) {
        &{ $self->valid_types()->{$type} }( $content, $ttl, $prio );
    }

    return;
}

sub create {
    my ( $self, $domain_id, $name, $type, $content, $ttl, $params ) = @_;

    # Authorization - No access for regular users
    if ( !$self->user->is_admin() ) {
        $self->msg->push( 'error', 'Sorry. No access for regular users.' );
        return;
    }

    $name = &VBoxAdm::Utils::trim( lc($name) );

    my $Domain      = VDnsAdm::Model::Domain->new( { 'Model' => $self, } );
    my $domain_name = $Domain->get_name($domain_id);
    my $record_name = $self->_get_record_name( $name, $type, $ttl, $content );

    my %args = (
        'name'        => $name,
        'domain_id'   => $domain_id,
        'type'        => $type,
        'content'     => $content,
        'ttl'         => $ttl,
        'prio'        => undef,
        'change_date' => undef,
        'ordername'   => undef,
        'auth'        => undef,
    );

    #
    # Name
    #
    # Nop

    #
    # Type
    #
    if ( !$self->_valid_type($type) ) {
        $self->msg->push( 'error', 'Invalid Record Type. Can not add!' );
        return;
    }

    #
    # Content
    #
    if ( !$self->_valid_content( $type, $content ) ) {
        $self->msg->push( 'error', 'Invalid content for type!' );
        return;
    }

    #
    # TTL
    #
    if ( $ttl !~ m/^\d+$/ || length($ttl) > 11 ) {
        $self->msg->push( 'error', 'Invalid data for ttl!' );
        return;
    }

    #
    # Prio
    #
    if ( $params->{'MaxMsgSize'} ) {
        $args{'max_msg_size'} = $params->{'MaxMsgSize'} * 1024;
    }

    #
    # ChangeDate
    #
    if ( defined( $params->{'SAActive'} ) ) {
        if ( $params->{'SAActive'} ) {
            $args{'sa_active'} = 1;
        }
        else {
            $args{'sa_active'} = 0;
        }
    }
    if ( $params->{'SAKillScore'} ) {
        $args{'sa_kill_score'} = $params->{'SAKillScore'};
    }

    #
    # Ordername
    #

    #
    # Auth
    #

    # Check authorization, syntax and create mailbox
    if ( $domain_id && !$self->user->is_siteadmin() && $self->user->is_domainadmin() && $domain_id != $self->user->get_domain_id() ) {

        # if domainadmin, verify that its his domain
        $self->msg->push( 'error', "You are not authorized to modify this domain!" );
    }
    else {
        my $query = "INSERT INTO records (" . join( ",", keys %args ) . ") VALUES(";
        $query .= "?," x ( scalar( keys %args ) - 1 );
        $query .= "?)";

        foreach my $key ( keys %args ) {
            $args{$key} = 0 unless defined( $args{$key} );
            $args{$key} = Encode::decode( 'UTF-8', $args{$key} );
        }
        if ( my $sth = &VWebAdm::DB::prepexec( $self->dbh, $query, values %args ) ) {
            $sth->finish();
            $self->msg->push( 'information', "Added Record [_1] for [_2].", $record_name, $domain_name );
        }
        else {
            $self->logger()->log( 'Could not execute Query: ' . $query . ', Args: ' . join( "-", (%args) ) . ', Error: ' . $self->dbh()->errstr() );
            $self->msg->push( 'error', "Failed to add Record [_1] for [_2]. Database Error: " . $sth->dbh()->err(), $record_name, $domain_name );
        }
    }
    return;
}

sub delete {
    my ( $self, $record_id ) = @_;

    # Authorization - No access for regular users
    if ( !$self->user->is_admin() ) {
        $self->msg->push( 'error', 'Sorry. No access for regular users.' );
        return;
    }

    if ( !$record_id || $record_id !~ m/^\d+$/ ) {
        $self->msg->push( 'error', "Failed to remove record. Insufficient parameters." );
        return;
    }
    my $query = "SELECT name, type, content, ttl FROM records WHERE id = ?";
    my $sth = &VWebAdm::DB::prepexec( $self->dbh, $query, $record_id );
    my ( $name, $type, $content, $ttl ) = $sth->fetchrow_array();
    my $record_name = $self->_get_record_name( $name, $type, $ttl, $content );
    $sth->finish();

    $query = "DELETE FROM records WHERE id = ?";
    my @args = ();
    push( @args, $record_id );
    if ( !$self->user->is_siteadmin() && $self->user->is_domainadmin() ) {
        $query .= "AND domain_id = ?";
        push( @args, $self->user->get_domain_id() );
    }
    if ( $sth = &VWebAdm::DB::prepexec( $self->dbh, $query, @args ) ) {
        $self->msg->push( 'information', "Record [_1] (#[_2]) removed.", $record_name, $record_id );
    }
    else {
        $self->logger()->log( 'Could not execute Query: ' . $query . ', Args: ' . join( "-", @args ) . ', Error: ' . $self->dbh()->errstr() );
        $self->msg->push( 'error', "Failed to remove Record [_1] (#[_2]). Database Error: " . $self->dbh()->err(), $record_name, $record_id );
    }

    return 1;
}

sub _get_record_name {
    my $self    = shift;
    my $name    = shift;
    my $type    = shift;
    my $ttl     = shift;
    my $content = shift;

    return $name . ' IN ' . $type . ' ' . $ttl . ' ' . $content;
}

sub update {
    my ( $self, $record_id, $params ) = @_;

    # Authorization - Regular Users may access this method!

    if ( !$record_id || $record_id !~ m/^\d+$/ ) {
        $self->msg->push( 'error', 'Failed to update record. Need a numeric record id.' );
        return;
    }

    my $query = "SELECT name, type, content, ttl FROM records WHERE id = ?";
    my $sth = &VWebAdm::DB::prepexec( $self->dbh, $query, $record_id );
    my ( $name, $type, $content, $ttl ) = $sth->fetchrow_array();
    my $record_name = $self->_get_record_name( $name, $type, $ttl, $content );
    $sth->finish();

    my $msg_loc = '';
    my $msg_en  = '';

    $query = "UPDATE records SET ";

    # only execute query if scalar(@params) > 0, i.e. at least on valid option
    my @args = ();

    foreach my $key ( keys %{$params} ) {
        $params->{$key} = Encode::decode( 'UTF-8', $params->{$key} );
    }

    #
    # Name
    #
    if ( $params->{'Name'} ) {
        $query .= "name = ?, ";
        push( @args, $params->{'Name'} );
    }

    #
    # Type
    #
    if ( defined( $params->{'Type'} ) ) {
        if ( $self->_valid_type( $params->{'Type'} ) ) {
            $query .= "type = ?, ";
            push( @args, $params->{'Type'} );
        }
    }

    #
    # Content
    #
    if ( defined( $params->{'Content'} ) ) {
        my $t = $params->{'Type'} || $type;
        if ( $self->_valid_content( $t, $params->{'Content'} ) ) {
            $query .= "content = ?, ";
            push( @args, $params->{'Content'} );
        }
    }

    #
    # TTL
    #
    if ( defined( $params->{'TTL'} ) && $params->{'TTL'} =~ m/^\d+$/ ) {
        $query .= "ttl = ?, ";
        push( @args, $params->{'TTL'} );
    }

    #
    # Prio
    #
    if ( defined( $params->{'Prio'} ) && $params->{'Prio'} =~ m/^\d+$/ ) {
        $query .= "prio = ?, ";
        push( @args, $params->{'Prio'} );
    }

    #
    # ChangeDate
    #
    if ( defined( $params->{'ChangeDate'} ) && $params->{'ChangeDate'} =~ m/^\d+$/ ) {
        $query .= "change_date = ?, ";
        push( @args, $params->{'ChangeDate'} );
    }

    # Ordername
    # TODO
    # Auth
    # TODO

    # at least on option has changed
    if ( scalar(@args) > 1 ) {

        # remove (possible) trailing ,
        $query =~ s/,\s*$//;

        # finialize query
        $query .= " WHERE id = ?";
        push( @args, $record_id );

        # if domainadmin, verify that its his domain
        if ( $self->user->is_siteadmin() ) {

            # Siteadmin? - OK, go ahead. Do anything you want ...
        }
        elsif ( $self->user->is_domainadmin() ) {

            # Domainadmin? - Only your domain please!
            $query .= "AND domain_id = ?";
            push( @args, $self->user->get_domain_id() );
        }
        else {
            $self->msg->push( 'error', 'Sorry, no access for you!' );
            return;
        }

        #$self->log( "Record::update - SQL: ".$query. " - Args: ".join(',',@args));
        if ( my $sth = &VWebAdm::DB::prepexec( $self->dbh, $query, @args ) ) {
            $self->msg->push( 'information', "Updated Record [_1] (#[_2]).", $record_name, $record_id );
        }
        else {
            $self->logger()->log( 'Could not execute Query: ' . $query . ', Args: ' . join( "-", @args ) . ', Error: ' . $self->dbh()->errstr() );
            $self->msg->push( 'error', "Failed to update Record [_1] (#[_2]). Database Error.", $record_name, $record_id );
        }
    }
    else {
        $self->msg->push( 'warning', 'No Parameter changed.' );
    }

    return;
}

sub read {
    my ( $self, $mailbox_id ) = @_;

    my $sql = "SELECT " . join( ",", @{ $self->fields() } ) . " FROM records WHERE id = ?";
    my @args = ($mailbox_id);

    if ( !$self->user->is_siteadmin() ) {
        $sql .= " AND domain_id = ?";
        push( @args, $self->user->get_domain_id() );
    }
    else {
        $self->msg->push( 'error', 'Sorry, no access for you!' );
        return;
    }

    my $sth = &VWebAdm::DB::prepexec( $self->dbh, $sql, @args );

    if ( !$sth ) {
        $self->msg->push( 'error', 'Database error.' );
        return;
    }

    my %result;
    @result{ @{ $self->fields() } } = $sth->fetchrow_array();
    $sth->finish();

    # get domain_name
    $sql = "SELECT name FROM domains WHERE id = ?";
    $sth = &VWebAdm::DB::prepexec( $self->dbh, $sql, $result{'domain_id'} );
    if ($sth) {
        $result{'domain'} = $sth->fetchrow_array();
    }

    foreach my $key ( keys %result ) {
        $result{$key} = Encode::decode( 'UTF-8', $result{$key} ) unless Encode::is_utf8( $result{$key} );
    }

    return \%result;
}

sub list {
    my ( $self, $param ) = @_;

    # Authorization - No access for regular users
    if ( !$self->user->is_admin() ) {
        $self->msg->push( 'error', 'Sorry. No access for regular users.' );
        return;
    }

    my @fields = @{ $self->fields() };
    my $sql    = "SELECT r." . join( ",r.", @fields ) . ",d.name FROM records AS r LEFT JOIN domains AS d ON r.domain_id = d.id WHERE 1";
    my @args   = ();
    if ( $param->{'Search'} ) {
        $sql .= " AND name LIKE ? OR content LIKE ?";
        my $term = $param->{'Search'};
        $term =~ s/[*%]+//g;
        $term = '%' . $term . '%';
        push( @args, $term );
        push( @args, $term );
    }
    if ( $param->{'domain_id'} ) {
        $sql .= " AND domain_id = ?";
        push( @args, $param->{'domain_id'} );
    }

    # domain admins may only see their own domain
    if ( !$self->user->is_siteadmin() ) {
        $sql .= " AND domain_id = ?";
        push( @args, $self->user->get_domain_id() );
    }

    # regular users are kicked out above

    my $sth = &VWebAdm::DB::prepexec( $self->dbh, $sql, @args );

    if ( !$sth ) {
        $self->msg->push( 'error', 'Database error.' );
        $self->log( 'Database Error during query ' . $sql . ': ' . $self->dbh->errstr );
        return;
    }

    my @entries = ();

    # domain name was not in the field list 'coz it is prefixed with d., not r.
    push( @fields, 'domain' );
    while ( my @row = $sth->fetchrow_array() ) {
        my %h;
        @h{@fields} = @row;
        foreach my $field ( keys %h ) {
            $h{$field} = Encode::decode( 'UTF-8', $h{$field} ) unless Encode::is_utf8( $h{$field} );
        }
        push( @entries, \%h );
    }
    $sth->finish();

    return @entries;
}

sub get_id {
    my ( $self, $record ) = @_;

    # Authorization - No access for regular users
    if ( !$self->user->is_admin() ) {
        $self->msg->push( 'error', 'Sorry. No access for regular users.' );
        return;
    }

    my ( $local_part, $domain );

    my $query = "SELECT m.id FROM records AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.local_part = ? AND d.name = ?";
    my $sth = &VWebAdm::DB::prepexec( $self->dbh, $query, $local_part, $domain );

    if ( !$sth ) {
        $self->msg->push( 'error', 'Database error.' );
        return;
    }

    my $id = $sth->fetchrow_array();
    $sth->finish();

    return $id;
}

no Moose;
__PACKAGE__->meta->make_immutable;

1;

__END__

=head1 NAME

VDnsAdm::Model::Records - Class for Records

=head1 VERSION

This documentation refers to VDnsAdm::Model::Record version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VDnsAdm::Model::Record;

=head1 DESCRIPTION

TODO

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
