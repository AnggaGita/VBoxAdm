package VBoxAdm::API::DomainAlias;

use strict;
use warnings;

use Carp;

use Sys::Syslog;

our $VERSION = '@VERSION@';

sub create {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";

=begin cut
    my $domain_alias = &VBoxAdm::Utils::trim( lc( $q->param('domain_alias') ) );
    my $domain_id    = $q->param('domain');

    my $msg = '';
    if ( $domain_alias && !&VBoxAdm::Utils::is_valid_domain_rfc822($domain_alias) ) {
        $msg = $self->{lh}->maketext("Invalid syntax. Domain is not RFC822 compliant!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $domain_id && !$self->is_superadmin() && $self->is_domainadmin() && $domain_id != $self->get_users_domainid() ) {

        # if domainadmin, verify that its his domain
        $msg = $self->{lh}->maketext("You are not authorized to modify this domain!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $domain_alias && $domain_id ) {
        my $query = "SELECT name FROM domains WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_id);
        my $domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "INSERT INTO domain_aliases (name,domain_id,is_active) VALUES(?,?,1)";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_add_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $domain_alias, $domain_id ) ) {
            $msg = $self->{lh}->maketext( "Added domain alias '[_1]' to domain [_2] (#[_3]).", $domain_alias, $domain_name, $domain_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog(
                2, 'show_add_domain_alias - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $domain_alias, $domain_id ) ),
                $sth->errstr
            );
            $msg =
              $self->{lh}->maketext( "Failed to add domain alias '[_1]' to domain [_2] (#[_3]). Database Error.", $domain_alias, $domain_name, $domain_id );
            $self->add_message( 'error', $msg );
        }
        $sth->finish();
    }
    else {
        $msg = $self->{lh}->maketext("Failed to add domain alias. No domain_alias or target domain given!");
        $self->add_message( 'error', $msg );
    }
=cut

    return;
}

sub delete {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";

=begin cut
    my $msg = '';
    if ($domain_alias_id) {
        my $query = "SELECT name FROM domain_aliases WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_alias_id);
        my $domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM domain_aliases WHERE id = ?";
        my @args = ();
        push( @args, $domain_alias_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        $sth = $dbh->prepare($query)
          or syslog( 2, 'show_remove_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute(@args) ) {
            $msg = $self->{lh}->maketext( "Domain-Alias [_1] (#[_2]) removed.", $domain_name, $domain_alias_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_remove_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to remove Domain-Alias [_1] (#[_2]). Database error.", $domain_name, $domain_alias_id );
            $self->add_message( 'error', $msg );
        }
    }
    else {
        $msg = $self->{lh}->maketext('Failed to remove domain alias. Insufficient parameters.');
        $self->add_message( 'error', $msg );
    }
=cut

    return;
}

sub update {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";

=begin cut
    my $msg1        = '';
    my $domain_name = '';
    if ($domain_alias_id) {
        my $query = "SELECT name FROM domain_aliases WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_alias_id);
        $domain_name = $sth->fetchrow_array();
        $sth->finish();
    }

    if ( $domain_alias_id && defined($is_active) ) {
        my $query = "UPDATE domain_aliases SET is_active = ? WHERE id = ?";
        my @args  = ();
        push( @args, $is_active );
        push( @args, $domain_alias_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        my $sth = $dbh->prepare($query)
          or syslog( 2, 'show_update_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my $status_str = 'disabled';
        if ( $is_active eq 'on' || $is_active eq 'true' ) {
            $status_str = 'enabled';
            $is_active  = 1;
        }
        if ( $sth->execute(@args) ) {
            my $msg = $self->{lh}->maketext( "Domain-Alias [_1] (#[_2]) $status_str.", $domain_name, $domain_alias_id );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_update_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to set Domain-Alias [_1] (#[_2]) [_3]. Database Error.", $domain_name, $domain_alias_id, $status_str );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }

    if ( $target && !$self->is_superadmin() && $self->is_domainadmin() && $target != $self->get_users_domainid() ) {

        # if domainadmin, verify that its his domain
        my $msg = "You are not authorized to modify this domain!";
        $self->add_message( 'errror', $msg );
        $msg1 .= $msg . ' ';
    }
    elsif ( $domain_alias_id && $target ) {
        my $query = "SELECT name FROM domains WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($target);
        my $target_domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "UPDATE domain_aliases SET domain_id = ? WHERE id = ?";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_update_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $target, $domain_alias_id ) ) {
            my $msg =
              $self->{lh}
              ->maketext( "Domain-Alias [_1] (#[_2]) redirected to Domain [_3] (#[_4]).", $domain_name, $domain_alias_id, $target_domain_name, $target );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog(
                2, 'show_update_domain_alias - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $target, $domain_alias_id ) ),
                $sth->errstr
            );
            my $msg =
              $self->{lh}
              ->maketext( "Failed to redirect Domain-Alias [_1] (#[_2]) to Domain [_3] (#[_4]).", $domain_name, $domain_alias_id, $target_domain_name,
                $target );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }
=cut

    return;
}

sub read {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";
    return;
}

sub list {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";
    return;
}

1;
__END__

=head1 NAME

VBoxAdm::Model::DomainAlias - Class for Domain Aliases

=head1 VERSION

This documentation refers to VBoxAdm::Model::DomainAlias version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::DomainAlias;

=head1 DESCRIPTION

TODO

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
