package VBoxAdm::API::Mailbox;

use strict;
use warnings;

use Carp;
use Sys::Syslog;

use VBoxAdm::SaltedHash '@VERSION@';

use base qw(VBoxAdm::Model);
use Class::Std;
{

    # Attributes
    my %fields_of : ATTR;

    sub BUILD {
        my ( $self, $ident, $arg_ref ) = @_;

        if ( !$self->user->is_user() ) {
            return;    # Need user object
        }

        $fields_of{$ident} = [
            qw(
              id domain_id local_part password name is_active max_msg_size
              is_on_vacation vacation_subj vacation_msg vacation_start vacation_end
              quota is_domainadmin is_superadmin sa_active sa_kill_score
              )
        ];
    }

    sub create {
        my ( $self, $local_part, $domain_id, $params ) = @_;
        my $ident = ident $self;

        $local_part = &VBoxAdm::Utils::trim( lc($local_part) );

        my $Domain = VBoxAdm::Model::Domain->new( { 'Model' => $self, } );
        my $domain_name = $Domain->get_name_by_id($domain_id);

        my $system_domain = $self->config->{'default'}{'domain'}   || 'localhost';
        my $pwscheme      = $self->config->{'default'}{'pwscheme'} || 'ssha256';

        my %args = (
            'local_part'     => $local_part,
            'domain_id'      => $domain_id,
            'password'       => undef,
            'is_active'      => undef,
            'name'           => '',
            'sa_active'      => 1,
            'sa_kill_score'  => 6.31,
            'is_domainadmin' => 0,
            'is_superadmin'  => 0,
        );

        #
        # is_active
        #
        if ( defined( $params->{'is_active'} ) ) {
            if ( $params->{'is_active'} ) {
                $args{'is_active'} = 1;
            }
            else {
                $args{'is_active'} = 0;
            }
        }

        #
        # Admin Status
        #
        if ( $self->user->is_superadmin() ) {
            $args{'is_superadmin'}  = $params->{'is_superadmin'};
            $args{'is_domainadmin'} = $params->{'is_domainadmin'};
        }
        elsif ( $self->user->is_domainadmin() && $domain_id == $self->user->get_domain_id() ) {
            $args{'is_domainadmin'} = $params->{'is_domainadmin'};
        }

        #
        # Passwords
        #
        # No Passwords given, generate one
        if ( !$params->{'password'} && !$params->{'password_again'} ) {
            $args{'password'} = Crypt::GeneratePassword::word( 8, 16 );
            $self->msg->push( 'information', 'Generated Password: [_1].', $args{'password'} );
        }

        # Passwords given and matching
        if ( $params->{'password'} && $params->{'password_again'} && $params->{'password'} eq $params->{'password_again'} ) {
            $args{'password'} = $params->{'password'};
        }

        # Check authorization, syntax and create mailbox
        if ( $domain_id && !$self->user->is_superadmin() && $self->user->is_domainadmin() && $domain_id != $self->user->get_domain_id() ) {

            # if domainadmin, verify that its his domain
            $self->msg->push( 'error', "You are not authorized to modify this domain!" );
        }
        elsif ( $local_part && !&VBoxAdm::Utils::is_valid_localpart_rfc822($local_part) ) {
            $self->msg->push( 'error', "Invalid local part. This address is not RFC822 compliant!" );
        }
        else {
            $args{'password'} = &VBoxAdm::SaltedHash::make_pass( $args{'password'}, $pwscheme );
            my $query = "INSERT INTO mailboxes (" . join( ",", keys %args ) . ") VALUES(";
            $query .= "?," x scalar( keys %args ) - 1;
            $query .= "?)";
            if ( my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $query, values %args ) ) {
                $sth->finish();
                $self->msg->push( 'information', "Added Mailbox [_1] for [_2].", "$local_part\@$domain_name", $args{'name'} );

                # send_welcome_mail
                my $emsg = '';
                $emsg .= "Subject: " . $self->maketext("Welcome") . "\r\n";
                $emsg .= "Auto-Submitted: auto-generated\r\n";
                $emsg .= "From: VBoxAdm <vboxadm\@" . $system_domain . ">\r\n";
                $emsg .= "To: <$local_part\@$domain_name>\r\n";
                $emsg .= "\r\n";
                $emsg .= $self->maketext("Welcome to your new mailbox.");
                &VBoxAdm::Utils::sendmail( 'vboxadm@' . $system_domain, $emsg );
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", (%args) ), $sth->errstr );
                $self->msg->push( 'error', "Failed to add Mailbox [_1] for [_2]. Database Error.", "$local_part\@$domain_name", $args{'name'} );
            }
        }
        return;
    }

    sub delete {
        my ( $self, $mailbox_id ) = @_;
        my $ident = ident $self;

        my $msg_loc = '';
        my $msg_en  = '';
        if ( !$mailbox_id ) {
            $self->msg->push( 'error', "Failed to remove mailbox. Insufficient parameters." );
            return;
        }
        my $query        = "SELECT CONCAT(m.local_part,'\@',d.name) FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.id = ?";
        my $sth          = &VBoxAdm::DB::prepexec( $self->dbh, $query, $mailbox_id );
        my $mailbox_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM mailboxes WHERE id = ?";
        my @args = ();
        push( @args, $mailbox_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        if ( $sth = &VBoxAdm::DB::prepexec( $self->dbh, $query, @args ) ) {
            $self->msg->push( 'information', "Mailbox [_1] (#[_2]) removed.", $mailbox_name, $mailbox_id );
        }
        else {
            $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $self->msg->push( 'error', "Failed to remove Mailbox [_1] (#[_2]). Database Error.", $mailbox_name, $mailbox_id );
        }

        return 1;
    }

    sub update {
        my ( $self, $mailbox_id, $params ) = @_;
        my $ident = ident $self;

        if ( !$mailbox_id || $mailbox_id !~ m/^\d+$/ ) {
            return;    # need numeric mailbox id
        }
        my $query        = "SELECT CONCAT(m.local_part,'\@',d.name) FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.id = ?";
        my $sth          = &VBoxAdm::DB::prepexec( $self->dbh, $query, $mailbox_id );
        my $mailbox_name = $sth->fetchrow_array();
        $sth->finish();

        my $pwscheme = $self->config->{'default'}{'pwscheme'} || 'ssha256';
        my $msg_loc  = '';
        my $msg_en   = '';

        $query = "UPDATE mailboxes SET ";

        # only execute query if scalar(@params) > 0, i.e. at least on valid option
        my @args = ();

        #
        # Password
        #
        if ( $params->{'password'} && $params->{'password_again'} ) {

            $Data::Password::MINLEN = 8;
            $Data::Password::MAXLEN = undef;

            # passwords must be equal and at least 8 chars long
            if ( $params->{'password'} eq $params->{'password_again'} ) {

                # Check password length
                if ( length( $params->{'password'} ) < 8 ) {
                    $self->msg->push( 'warning', 'Bad password - Password too short. Need at least 8 characters.' );
                }

                # Check password strength
                if ( my $str = Data::Password::IsBadPassword( $params->{'password'} ) ) {
                    $self->msg->push( 'warning', 'Weak password - [_1].', $str );
                }
                $query .= "password = ?, ";
                push( @args, VBoxAdm::SaltedHash::make_pass( $params->{'password'}, $pwscheme ) );
            }
        }

        #
        # Name
        #
        if ( $params->{'name'} ) {
            $query .= "name = ?, ";
            push( @args, $params->{'name'} );
        }

        #
        # Is_Active
        #
        my $status_str = 'disabled';
        if ( $params->{'is_active'} ) {
            $status_str = 'enabled';
            $params->{'is_active'} = 1;
        }
        else {
            $params->{'is_active'} = 0;
        }
        $query .= "is_active = ?, ";
        push( @args, $params->{'is_active'} );

        #
        # Max Msg Size
        #
        if ( defined( $params->{'max_msg_size'} ) && $params->{'max_msg_size'} =~ m/^\d+$/ ) {
            $query .= "max_msg_size = ?, ";
            push( @args, $params->{'max_msg_size'} );
        }

        #
        # Is Superadmin / Is Domainadmin
        #
        if ( $self->user->is_superadmin() ) {
            $query .= "is_superadmin = ?, ";
            if ( $params->{'is_superadmin'} ) {
                push( @args, 1 );
            }
            else {
                push( @args, 0 );
            }
            $query .= "is_domainadmin = ?, ";
            if ( $params->{'is_domainadmin'} ) {
                push( @args, 1 );
            }
            else {
                push( @args, 0 );
            }
        }

        #
        # SpamAssassin
        #
        # Kill Score
        if ( defined( $params->{'sa_kill_score'} ) && $params->{'sa_kill_score'} =~ m/^\d+$/ ) {
            $query .= "sa_kill_score = ?, ";
            push( @args, $params->{'sa_kill_score'} );
            if ( $params->{'sa_kill_score'} > 10 ) {
                $self->msg->push( 'warning', 'SpamAssassin kill score probably set too high! Should be below 10.' );
            }
            elsif ( $params->{'sa_kill_score'} < 5 ) {
                $self->msg->push( 'warning', 'SpamAssassin kill score probably set too low! Should be above 5.' );
            }
        }

        # Scanning enabled
        if ( defined( $params->{'sa_active'} ) ) {
            if ( $params->{'sa_active'} ) {
                $params->{'sa_active'} = 1;
            }
            else {
                $params->{'sa_active'} = 0;
            }
            push( @args, $params->{'sa_active'} );
            $query .= "sa_active = ?, ";
        }

        #
        # Vacation
        #
        # Is_On_Vacation / Vacation Msg
        if ( defined( $params->{'is_on_vacation'} ) ) {
            if ( $params->{'is_on_vacation'} ) {
                if (   $params->{'vacation_subj'}
                    && length( $params->{'vacation_subj'} )
                    && $params->{'vacation_msg'}
                    && length( $params->{'vacation_msg'} ) > 1 )
                {
                    $params->{'is_on_vacation'} = 1;
                }
                else {
                    $self->msg->push( 'warning', 'Attempt to enable Vacation w/o vacation message or subject denied!' );
                }
                if ( $params->{'vacation_start'} && $params->{'vacation_start'} =~ m/^\s*(\d\d)\.(\d\d)\.(\d\d\d\d)\s*$/ ) {
                    $params->{'vacation_start'} = "$3-$2-$1";
                }
                else {
                    $params->{'vacation_start'} = '0000-00-00';
                    $self->msg->push( 'error', 'Invalid vacation start date!' );
                }
                if ( $params->{'vacation_end'} && $params->{'vacation_end'} =~ m/^\s*(\d\d)\.(\d\d)\.(\d\d\d\d)\s*$/ ) {
                    $params->{'vacation_end'} = "$3-$2-$1";
                }
                else {
                    $params->{'vacation_end'} = '0000-00-00';
                    $self->msg->push( 'error', 'Invalid vacation end date!' );
                }
                $query .= "is_on_vacation = ?, vacation_msg = ?, vacation_subj = ?, vacation_start = ?, vacation_end = ? ";
                push( @args, $params->{'is_on_vacation'} );
                push( @args, $params->{'vacation_msg'} );
                push( @args, $params->{'vacation_subj'} );
                push( @args, $params->{'vacation_start'} );
                push( @args, $params->{'vacation_end'} );
            }
            else {
                $params->{'is_on_vacation'} = 0;
                $params->{'vacation_start'} = '0000-00-00';
                $params->{'vacation_end'}   = '0000-00-00';
                $query .= "is_on_vacation = ?, vacation_start = ?, vacation_end = ? ";
                push( @args, $params->{'is_on_vacation'} );
                push( @args, $params->{'vacation_start'} );
                push( @args, $params->{'vacation_end'} );
            }
        }

        # at least on option has changed
        if ( scalar(@args) > 1 ) {

            # finialize query
            $query .= " WHERE id = ?";
            push( @args, $mailbox_id );

            # if domainadmin, verify that its his domain
            if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
                $query .= "AND domain_id = ?";
                push( @args, $self->get_users_domainid() );
            }
            if ( my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $query, @args ) ) {
                $self->msg->push( 'information', "Updated Mailbox [_1] (#[_2]).", $mailbox_name, $mailbox_id );
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
                $self->msg->push( 'error', "Failed to update Mailbox [_1] (#[_2]). Database Error.", $mailbox_name, $mailbox_id );
            }
        }
        else {
            $self->msg->push( 'warning', 'No Parameter changed.' );
        }

        return;
    }

    sub read {
        my ( $self, $mailbox_id ) = @_;
        my $ident = ident $self;

        my $sql = "SELECT " . join( ",", @{ $fields_of{$ident} } ) . " FROM mailboxes WHERE id = ?";
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, $mailbox_id );
        my %result;
        @result{ @{ $fields_of{$ident} } } = $sth->fetchrow_array();
        $sth->finish();
        return \%result;
    }

    sub list {
        my ( $self, $param ) = @_;
        my $ident = ident $self;

        my @fields = @{ $fields_of{$ident} };
        my $sql    = "SELECT m." . join( ",m.", @fields ) . ",d.name FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE 1";
        my @args   = ();
        if ( $param->{'Search'} ) {
            $sql .= " AND local_part LIKE ? OR domain LIKE ? OR name LIKE ?";
            my $term = $param->{'Search'};
            $term =~ s/[*%]+//g;
            $term = '%' . $term . '%';
            push( @args, $term );
            push( @args, $term );
            push( @args, $term );
        }
        if ( $param->{'domain_id'} ) {
            $sql .= " AND domain_id = ?";
            push( @args, $param->{'domain_id'} );
        }

        my $sth = $self->dbh->prepare($sql);
        $sth->execute(@args);
        my @entries = ();

        # domain name was not in the field list 'coz it is prefixed with d., not m.
        push( @fields, 'domain' );
        while ( my @row = $sth->fetchrow_array() ) {
            my %h;
            @h{ @{@fields} } = @row;
            push( @entries, \%h );
        }
        $sth->finish();

        return @entries;
    }

    sub get_email {
        my ( $self, $id ) = @_;
        my $ident = ident $self;
        my $query = "SELECT m.local_part,d.name FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.id = ?";
        my $sth   = &VBoxAdm::DB::prepexec( $self->dbh, $query, $id );
        my ( $local_part, $domain ) = $sth->fetchrow_array();
        $sth->finish();
        return wantarray ? ( $local_part, $domain ) : $local_part . '@' . $domain;
    }

    sub get_id {
        my ( $self, $email ) = @_;
        my $ident = ident $self;

        if ( !&VBoxAdm::Utils::is_valid_address_rfc822($email) ) {
            return;
        }

        my ( $local_part, $domain ) = split /@/, $email;

        my $query = "SELECT m.id FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.local_part = ? AND d.name = ?";
        my $sth   = &VBoxAdm::DB::prepexec( $self->dbh, $query, $local_part, $domain );
        my $id    = $sth->fetchrow_array();
        $sth->finish();
        return $id;
    }
}
1;
__END__

=head1 NAME

VBoxAdm::Model::Mailbox - Class for Mailboxes

=head1 VERSION

This documentation refers to VBoxAdm::Model::Mailbox version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::Mailbox;

=head1 DESCRIPTION

TODO

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
