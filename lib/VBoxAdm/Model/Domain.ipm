package VBoxAdm::API::Domain;

use strict;
use warnings;

use Carp;

use Sys::Syslog;
use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';
use base qw(VBoxAdm::Model);
use Class::Std;
{

    # Attributes
    # none

    sub BUILD {
        my ( $self, $ident, $arg_ref ) = @_;

        if ( !$self->user->is_user() ) {
            return;    # Need user object
        }
    }

    sub create {
        my ( $self, $domain ) = @_;
        my $ident = ident $self;

        $domain = &VBoxAdm::Utils::trim( lc($domain) );

        my $msg_loc = '';
        my $msg_en  = '';
        if ( $domain && !&VBoxAdm::Utils::is_valid_domain_rfc822($domain) ) {
            my $msg = 'Invalid syntax. Domain is not RFC822 compliant!';
            $msg_loc = $self->maketext($msg);
            $msg_en  = $self->maketext($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
        elsif ($domain) {
            my $query = "INSERT INTO domains (name,is_active) VALUES(?,1)";

            if ( my $sth = &VBoxAdm::DB::prepexec( $self->sql, $query, $domain ) ) {
                my $msg = "Domain '[_1]' added";
                $msg_loc = $self->maketext( $msg, $domain );
                $msg_en = $self->maketext_en( $msg, $domain );
                $sth->finish();
                return wantarray ? ( 1, $msg_loc, $msg_en ) : 1;
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, $domain, $sth->errstr );
                my $msg = "Failed to add Domain '[_1]'. Database error.";
                $msg_loc = $self->maketext( $msg, $domain );
                $msg_en = $self->maketext_en( $msg, $domain );
                return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
            }

        }
        else {
            my $msg = "Failed to add Domain. Insufficient parameters.";
            $msg_loc = $self->maketext( $msg, $domain );
            $msg_en = $self->maketext_en( $msg, $domain );
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
    }

    sub delete {
        my ( $self, $domain_id ) = @_;
        my $ident = ident $self;
        my $sql   = "DELETE FROM domains WHERE id = ? LIMIT 1";
        my $sth   = &VBoxAdm::DB::prepexec( $self->dbh, $domain_id );
        $sth->finish();
        return;
    }

    sub update {
        my ( $self, $domain_id, $params ) = @_;
        my $ident = ident $self;

        my $sql  = "UPDATE domains SET ";
        my @args = ();

        if ( defined( $params->{'is_active'} ) ) {
            $sql .= "is_active = ? ";
            if ( $params->{'is_active'} ) {
                push( @args, 1 );
            }
            else {
                push( @args, 0 );
            }
        }

        if ( scalar(@args) > 0 ) {
            $sql .= "WHERE id = ?";
            push( @args, $domain_id );
            if ( my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, @args ) ) {
                $sth->finish();

                # TODO report success
                return 1;
            }
            else {

                # TODO report error
                return;
            }
        }
    }

    sub read {
        warn "Not yet implemented!\n";
        return;
    }

    sub list {
        my ( $self, $param ) = @_;
        my $ident = ident $self;

        my @fields = qw(
          id name is_active
        );
        my $sql = "SELECT " . join( ",", @fields ) . " FROM domains WHERE 1";
        my @args = ();
        if ( $param->{'Search'} ) {
            $sql .= " AND name LIKE ?";
            my $term = $param->{'Search'};
            $term =~ s/[*%]+//g;
            $term = '%' . $term . '%';
            push( @args, $term );
        }

        my $sth = $self->dbh->prepare($sql);
        $sth->execute(@args);
        my @entries = ();
        while ( my @row = $sth->fetchrow_array() ) {
            my %h;
            @h{@fields} = @row;
            push( @entries, \%h );
        }
        $sth->finish();

        return @entries;
    }

    sub get_name_by_id {
        my ( $self, $id ) = @_;
        my $ident       = ident $self;
        my $query       = "SELECT name FROM domains WHERE id = ?";
        my $sth         = &VBoxAdm::DB::prepexec( $self->dbh, $query, $id );
        my $domain_name = $sth->fetchrow_array();
        $sth->finish();
        return $domain_name;
    }

    sub get_id_by_name {
        my ( $self, $name ) = @_;
        my $ident     = ident $self;
        my $query     = "SELECT id FROM domains WHERE name = ?";
        my $sth       = &VBoxAdm::DB::prepexec( $self->dbh, $query, $name );
        my $domain_id = $sth->fetchrow_array();
        $sth->finish();
        return $domain_id;
    }
}
1;
__END__

=head1 NAME

VBoxAdm::Model::Domain - Class for Domains

=head1 VERSION

This documentation refers to VBoxAdm::Model::Domain version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::Domain;

=head1 DESCRIPTION

This class provides common DB methods.

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
