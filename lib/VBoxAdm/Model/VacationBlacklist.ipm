package VBoxAdm::API::VacationBlacklist;

use strict;
use warnings;

use Carp;

use Sys::Syslog;

use base qw(VBoxAdm::Model);
use Class::Std;
{

    # Attributes
    # none

    sub BUILD {
        my ( $self, $ident, $arg_ref ) = @_;

        if ( !$self->user->is_user() ) {
            return;    # Need user object
        }
    }

    sub create {
        my ( $self, $email ) = @_;
        my $ident = ident $self;

        my $msg_loc = '';
        my $msg_en  = '';

        if ( $email && &VBoxAdm::Utils::is_valid_address_rfc822($email) ) {
            my $query = "INSERT INTO vacation_blacklist (local_part,domain) VALUES(?,?)";
            my $sth   = $self->dbh->prepare($query)
              or $self->log( 'Could not prepare Query: %s, Error: %s', $query, $self->dbh->errstr );
            my ( $local_part, $domain ) = split /@/, $email;
            if ( $sth->execute( $local_part, $domain ) ) {
                $sth->finish();
                my $msg = "Added Vacation Blacklist Entry [_1].";
                $msg_loc .= $self->maketext( $msg, $email );
                $msg_en .= $self->maketext_en( $msg, $email );
                return wantarray ? ( 1, $msg_loc, $msg_en ) : 1;
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", ( $local_part, $domain ) ), $sth->errstr );
                my $msg = "Failed to add Vacation Blacklist Entry [_1]. Database Error.";
                $msg_loc .= $self->maketext( $msg, $email );
                $msg_en .= $self->maketext_en( $msg, $email );
                return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
            }
        }
        else {
            my $msg = 'Invalid email given. Please provide a valid RFC822 email address.';
            $msg_loc .= $self->maketext( $msg, $email );
            $msg_en .= $self->maketext_en( $msg, $email );
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }

        return;
    }

    sub delete {
        my ( $self, $email ) = @_;
        my $ident    = ident $self;
        my $entry_id = $self->get_id($email);
        return $self->delete_wid($entry_id);
    }

    sub delete_wid {
        my ( $self, $entry_id ) = @_;
        my $ident = ident $self;

        my $msg_loc = '';
        my $msg_en  = '';

        if ($entry_id) {
            my $query = "SELECT local_part,domain FROM vacation_blacklist WHERE id = ?";
            my $sth   = $self->dbh->prepare($query);
            $sth->execute($entry_id);
            my $email = $sth->fetchrow_array();
            $sth->finish();

            $query = "DELETE FROM vacation_blacklist WHERE id = ?";
            $sth   = $self->dbh->prepare($query)
              or $self->log( 'Could not prepare Query: %s, Error: %s', $query, $self->dbh->errstr );
            if ( $sth->execute($entry_id) ) {
                $sth->finish();
                my $msg = "Delete Vacation Blacklist Entry [_1].";
                $msg_loc .= $self->maketext( $msg, $email );
                $msg_en .= $self->maketext_en( $msg, $email );
                return wantarray ? ( 1, $msg_loc, $msg_en ) : 1;
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, $entry_id, $sth->errstr );
                my $msg = "Failed to remove Vacation Blacklist Entry [_1]. Database Error.";
                $msg_loc .= $self->maketext( $msg, $email );
                $msg_en .= $self->maketext_en( $msg, $email );
                return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
            }
        }
        else {
            my $msg = 'Invalid id given. Please provide a valid id.';
            $msg_loc .= $self->maketext($msg);
            $msg_en  .= $self->maketext_en($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }

        return;
    }

    sub update {
        die("No VacationBlacklist::update");
    }

    sub read {
        my ( $self, $email ) = @_;
        my $ident = ident $self;

        warn "Not yet implemented!\n";

        return;
    }

    sub list {
        my ( $self, $param ) = @_;
        my $ident = ident $self;

        my $sql  = "SELECT id,local_part,domain FROM vacation_blacklist";
        my @args = ();
        if ( $param->{'Search'} ) {
            $sql .= " WHERE local_part LIKE ? OR domain LIKE ?";
            my $term = $param->{'Search'};
            $term =~ s/[*%]+//g;
            $term = '%' . $term . '%';
            push( @args, $term );
            push( @args, $term );
        }

        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, @args );
        my @entries = ();
        while ( my ( $id, $local_part, $domain ) = $sth->fetchrow_array() ) {
            push(
                @entries,
                {
                    'id'         => $id,
                    'local_part' => $local_part,
                    'domain'     => $domain,
                }
            );
        }
        $sth->finish();

        return @entries;
    }
}
1;
__END__

=head1 NAME

VBoxAdm::Model::VacationBlacklist - Class for Vacation Blacklist.

=head1 VERSION

This documentation refers to VBoxAdm::Model::VacationBlacklist version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::VacationBlacklist;

=head1 DESCRIPTION

TODO

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
