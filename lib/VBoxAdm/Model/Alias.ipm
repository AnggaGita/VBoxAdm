package VBoxAdm::Model::Alias;

use strict;
use warnings;

use Carp;
use Sys::Syslog;

use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';

use base qw(VBoxAdm::Model);
use Class::Std;
{

    # Attributes
    my %user_of : ATTR;

    sub BUILD {
        my ( $self, $ident, $arg_ref ) = @_;

        if ( !$arg_ref->{'User'} || !$arg_ref->{'User'}->is_user() ) {

            # Need user object
            return;
        }

        $user_of{$ident} = $arg_ref->{'User'};
    }

    sub create {
        my ( $self, $local_part, $domain, $goto ) = @_;
        my $ident = ident $self;

        $domain = &VBoxAdm::Utils::trim( lc($domain) );

        my $domain_id;

        # domain id?
        if ( $domain =~ m/^(\d+)$/ ) {
            $domain_id = $1;
        }
        else {

            # TODO use domain object
            $domain_id = &VBoxAdm::Model::Domain::get_id_by_name($domain);
        }

        return $self->_create_wid( $local_part, $domain_id, $goto );
    }

    sub get_id {
        my ( $self, $email ) = @_;

        if ( !&VBoxAdm::Utils::is_valid_address_rfc822($email) ) {
            return;
        }

        my ( $local_part, $domain ) = split /@/, $email;

        my $sql = "SELECT id FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.local_part = ? AND d.name = ?";
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, $local_part, $domain );
        my $id  = $sth->fetchrow_array();
        $sth->finish();
        return $id;
    }

    sub create_wid {
        my ( $self, $local_part, $domain_id, $goto ) = @_;
        my $ident = ident $self;

        $local_part = &VBoxAdm::Utils::trim( lc($local_part) );
        $goto       = &VBoxAdm::Utils::trim( lc($goto) );

        # TODO use domain object
        my $domain_name = &VBoxAdm::Model::Domain::get_name_by_id( $self->dbh, $domain_id );

        my $msg_loc = '';
        my $msg_en  = '';

        if ( $domain_id && !$user_of{$ident}->is_superadmin() && $user_of{$ident}->is_domainadmin && $domain_id != $user_of{$ident}->get_domain_id() ) {

            # if domainadmin, verify that its his domain
            my $msg = "You are not authorized to modify this domain!";
            $msg_loc = $self->maketext($msg);
            $msg_en  = $self->maketext_en($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
        elsif ( $local_part && !&VBoxAdm::Utils::is_valid_localpart_rfc822($local_part) ) {
            my $msg = "Invalid local part. This address is not RFC822 compliant!";
            $msg_loc = $self->maketext($msg);
            $msg_en  = $self->maketext_en($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
        elsif ( $goto && !&VBoxAdm::Utils::is_valid_addresses_rfc822($goto) ) {
            my $msg = "Invalid address in destination!";
            $msg_loc = $self->maketext($msg);
            $msg_en  = $self->maketext_en($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
        elsif ( $local_part && $domain_id && $goto ) {

            my $query = "INSERT INTO aliases (domain_id,local_part,goto,is_active) VALUES(?,?,?,1)";
            my $sth   = $self->dbh->prepare($query)
              or $self->log( 2, 'show_add_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
            if ( $sth->execute( $domain_id, $local_part, $goto ) ) {
                my $msg = "Alias [_1] to [_2] added.";
                $msg_loc = $self->maketext( $msg, "$local_part\@$domain_name", $goto );
                $msg_en = $self->maketext_en( $msg, "$local_part\@$domain_name", $goto );
                return wantarray ? ( 1, $msg_loc, $msg_en ) : 1;
            }
            else {
                $self->log(
                    2, 'show_add_alias - Could not execute Query: %s, Args: %s, Error: %s',
                    $query, join( "-", ( $domain_id, $local_part, $goto ) ),
                    $sth->errstr
                );
                my $msg = "Failed to add alias [_1] => [_2]. Database Error.";
                $msg_loc = $self->maketext( $msg, "$local_part\@$domain_name", $goto );
                $msg_en = $self->maketext_en( $msg, "$local_part\@$domain_name", $goto );
                return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
            }
            $sth->finish();
        }
        else {
            my $msg = "Failed to add alias. Missing local_part, domain_id or target.";
            $msg_loc = $self->maketext($msg);
            $msg_en  = $self->maketext_en($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }

        return;
    }

    sub delete {
        my ( $self, $email ) = @_;
        my $ident = ident $self;

        my $alias_id = &get_id($email);

        return $self->_delete_wid($alias_id);
    }

    sub _delete_wid {
        my ( $self, $alias_id ) = @_;
        my $ident = ident $self;

        my $msg_en  = '';
        my $msg_loc = '';

        if ( $alias_id && $alias_id =~ m/^\d+$/ ) {

            # get alias name for message
            my $query =
              'SELECT CONCAT(a.local_part,\'@\',d.name) AS alias,a.goto FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?';
            my $sth = $self->dbh->prepare($query);
            $sth->execute($alias_id);
            my ( $alias, $goto ) = $sth->fetchrow_array();
            $sth->finish();

            $query = "DELETE FROM aliases WHERE id = ?";
            my @args = ();
            push( @args, $alias_id );
            if ( !$user_of{$ident}->is_superadmin() ) {
                $query .= "AND domain_id = ?";
                push( @args, $user_of{$ident}->get_domain_id() );
            }
            $sth = $self->dbh->prepare($query)
              or $self->log( 2, 'show_remove_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
            if ( $sth->execute(@args) ) {
                my $msg = "Alias [_1] => [_2] (#[_3]) removed.";
                $msg_loc = $self->maketext( $msg, $alias, $goto, $alias_id );
                $msg_en = $self->maketext_en( $msg, $alias, $goto, $alias_id );
                return wantarray ? ( 1, $msg_loc, $msg_en ) : 1;
            }
            else {
                $self->log( 2, 'show_remove_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
                my $msg = "Failed to remove Alias [_1] => [_2] (#[_3]). Database Error.";
                $msg_loc = $self->maketext( $msg, $alias, $goto, $alias_id );
                $msg_en = $self->maketext_en( $msg, $alias, $goto, $alias_id );
                return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
            }
        }
        else {
            my $msg = 'Failed to remove alias. Insufficient parameters.';
            $msg_loc = $self->maketext($msg);
            $msg_en  = $self->maketext_en($msg);
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
        return;
    }

    sub update {
        my ( $self, $email, $params ) = @_;
        my $ident = ident $self;

        my $alias_id = &get_id($email);

        return &_update_wid( $alias_id, $params );
    }

    sub _update_wid {
        my ( $self, $params ) = @_;
        my $ident = ident $self;

        my $msg_en  = '';
        my $msg_loc = '';

        my $is_active = $params->{IsActive};
        my $target    = &VBoxAdm::Utils::trim( $params->{Goto} );

=begin cut
    my $msg1       = '';
    my $alias_name = '';
    if ($alias_id) {
        my $query = "SELECT a.local_part,d.name FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($alias_id);
        $alias_name = $sth->fetchrow_array();
        $sth->finish();
    } else {
    	# TODO error message
    	return;
    }

		# Update 'is_active' status
    if ( $alias_id && defined($is_active) ) {
        my $query = "UPDATE aliases SET is_active = ? WHERE id = ?";
        my @args  = ();
        push( @args, $is_active );
        push( @args, $alias_id );

        # Authorization
        if ( !$opts->{is_superadmin} && $opts->{is_domainadmin} ) {
            $query .= "AND domain_id = ?";
            push( @args, $opts->{users_domainid} );
        }
        my $sth = $dbh->prepare($query)
          or syslog( 2, 'show_update_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my $status_str = 'disabled';
        if ($is_active) {
            $status_str = 'enabled';
        }
        if ( $sth->execute(@args) ) {
            my $msg = $$self->maketext( "Alias [_1] (#[_2]) [_3].", $alias_name, $alias_id, $status_str );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_update_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to set Alias [_1] (#[_2]) [_3].", $alias_name, $alias_id, $status_str );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }

		# Update 'goto' target
    # clean target string
    if ($target) {
        $target = join( ",", split( /\s*,\s*/, $target ) );
    }
    if ( $target && !&VBoxAdm::Utils::is_valid_addresses_rfc822($target) ) {
        my $msg = $$self->maketext("Invalid address in destination!");
        $self->add_message( 'error', $msg );
        $msg1 .= $msg . ' ';
    }
    elsif ( $alias_id && $target ) {
        my $query = "UPDATE aliases SET goto = ? WHERE id = ?";
        my $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_mailboxes - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $target, $alias_id ) ) {
            my $msg .= $$self->maketext( "Alias [_1] (#[_2]) redirected to [_3].", $alias_name, $alias_id, $target );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_mailboxes - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", ( $target, $alias_id ) ), $sth->errstr );
            my $msg = $$self->maketext( "Failed to redirect Alias [_1] (#[_2]) to [_3].", $alias_name, $alias_id, $target );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }
=cut

        return;
    }

    sub read {
        my ($self) = @_;
        my $ident = ident $self;
        warn "Not yet implemented!\n";
        return;

        # TODO return a single entry
    }

    sub list {
        my ( $self, $params ) = @_;
        my $ident = ident $self;

        my $sql  = "SELECT a.id,d.id,a.local_part,d.name,... FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id";
        my @args = ();
        if ( $params->{Search} ) {

            # TODO search ;)
        }
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, @args );
        my @results = ();
        while ( my ( $local_part, $domain_name ) = $sth->fetchrow_array() ) {
            push(
                @results,
                {
                    local_part  => $local_part,
                    domain_name => $domain_name,

                    # ...
                }
            );
        }

        return @results;    # arrayref?
    }
}
1;
__END__

=head1 NAME

VBoxAdm::Model::Alias - Class for Aliases

=head1 VERSION

This documentation refers to VBoxAdm::Model::Alias version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::Alias;

=head1 DESCRIPTION

TODO

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
