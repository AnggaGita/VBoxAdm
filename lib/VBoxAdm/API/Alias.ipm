package VBoxAdm::API::Alias;

use strict;
use warnings;

use Carp;

use Sys::Syslog;

our $VERSION = '@VERSION@';

sub create {
    my $dbh        = shift;
    my $local_part = shift;
    my $domain     = shift;
    my $goto       = shift;
    my $opts       = shift || {};

    $domain = &VBoxAdm::Utils::trim( lc($domain) );

    my $domain_id;

    # domain id?
    if ( $domain =~ m/^(\d+)$/ ) {
        $domain_id = $1;
    }
    else {
        $domain_id = &VBoxAdm::API::Domain::get_id_by_name($domain);
    }

    return &create_id( $dbh, $local_part, $domain_id, $goto, $opts );
}

sub create_id {
    my $dbh        = shift;
    my $local_part = shift;
    my $domain_id  = shift;
    my $goto       = shift;
    my $opts       = shift || {};

    $local_part = &VBoxAdm::Utils::trim( lc($local_part) );
    $goto       = &VBoxAdm::Utils::trim( lc($goto) );

    my $domain_name = &VBoxAdm::API::Domain::get_name_by_id( $dbh, $domain_id );

    my $msg_loc = '';
    my $msg_en  = '';

    if ( $domain_id && !$opts->{is_superadmin} && $opts->{is_domainadmin} && $domain_id != $opts->{users_domainid} ) {

        # if domainadmin, verify that its his domain
        my $msg = "You are not authorized to modify this domain!";
        $msg_loc = $opts->{Lh}->maketext($msg)    if $opts->{Lh};
        $msg_en  = $opts->{Lh_EN}->maketext($msg) if $opts->{Lh_EN};
        return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
    }
    elsif ( $local_part && !&VBoxAdm::Utils::is_valid_localpart_rfc822($local_part) ) {
        my $msg = "Invalid local part. This address is not RFC822 compliant!";
        $msg_loc = $opts->{Lh}->maketext($msg)    if $opts->{Lh};
        $msg_en  = $opts->{Lh_EN}->maketext($msg) if $opts->{Lh_EN};
        return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
    }
    elsif ( $goto && !&VBoxAdm::Utils::is_valid_addresses_rfc822($goto) ) {
        my $msg = "Invalid address in destination!";
        $msg_loc = $opts->{Lh}->maketext($msg)    if $opts->{Lh};
        $msg_en  = $opts->{Lh_EN}->maketext($msg) if $opts->{Lh_EN};
        return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
    }
    elsif ( $local_part && $domain_id && $goto ) {

        my $query = "INSERT INTO aliases (domain_id,local_part,goto,is_active) VALUES(?,?,?,1)";
        my $sth   = $dbh->prepare($query)
          or $opts->{log}->( 2, 'show_add_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr )
          if $opts->{log};
        if ( $sth->execute( $domain_id, $local_part, $goto ) ) {
            my $msg = "Alias [_1] to [_2] added.";
            if ( $opts->{Lh} ) {
                $msg_loc = $opts->{Lh}->maketext( $msg, "$local_part\@$domain_name", $goto );
            }
            if ( $opts->{Lh_EN} ) {
                $msg_en = $opts->{Lh_EN}->maketext( $msg, "$local_part\@$domain_name", $goto );
            }
            return wantarray ? ( 1, $msg_loc, $msg_en ) : 1;
        }
        else {
            $opts->{log}->(
                2, 'show_add_alias - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $domain_id, $local_part, $goto ) ),
                $sth->errstr
            ) if $opts->{log};
            my $msg = "Failed to add alias [_1] => [_2]. Database Error.";
            $msg_loc = $opts->{Lh}->maketext( $msg, "$local_part\@$domain_name", $goto ) if $opts->{Lh};
            $msg_en = $opts->{Lh_EN}->maketext( $msg, "$local_part\@$domain_name", $goto ) if $opts->{Lh_EN};
            return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
        }
        $sth->finish();
    }
    else {
        my $msg = "Failed to add alias. Missing local_part, domain_id or target.";
        $msg_loc = $opts->{Lh}->maketext($msg)    if $opts->{Lh};
        $msg_en  = $opts->{Lh_EN}->maketext($msg) if $opts->{Lh_EN};
        return wantarray ? ( 0, $msg_loc, $msg_en ) : 0;
    }

    return;
}

sub delete {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";

=begin cut
my $alias_id = $q->param('alias_id');

    my $msg = '';

    if ($alias_id) {

        # get alias name for message
        my $query = 'SELECT CONCAT(a.local_part,\'@\',d.name) AS alias,a.goto FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?';
        my $sth   = $dbh->prepare($query);
        $sth->execute($alias_id);
        my ( $alias, $goto ) = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM aliases WHERE id = ?";
        my @args = ();
        push( @args, $alias_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        $sth = $dbh->prepare($query)
          or syslog( 2, 'show_remove_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute(@args) ) {
            $msg = $self->{lh}->maketext( "Alias [_1] => [_2] (#[_3]) removed.", $alias, $goto, $alias_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_remove_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to remove Alias [_1] => [_2] (#[_3]). Database Error.", $alias, $goto, $alias_id );
            $self->add_message( 'error', $msg );
        }
    }
    else {
        $msg = $self->{lh}->maketext('Failed to remove alias. Insufficient parameters.');
        $self->add_message( 'error', $msg );
    }
=cut

    return;
}

sub update {
    my $dbh   = shift;
    my $email = shift;
    my $opts  = shift || {};

    warn "Not yet implemented!\n";

=begin cut
my $alias_id  = $q->param('alias_id');
    my $is_active = $q->param('is_active');
    my $target    = &VBoxAdm::Utils::trim( $q->param('goto') );

    my $msg1       = '';
    my $alias_name = '';
    if ($alias_id) {
        my $query = "SELECT a.local_part,d.name FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($alias_id);
        $alias_name = $sth->fetchrow_array();
        $sth->finish();
    }

    if ( $alias_id && defined($is_active) ) {
        my $query = "UPDATE aliases SET is_active = ? WHERE id = ?";
        my @args  = ();
        push( @args, $is_active );
        push( @args, $alias_id );

        # Authorization
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        my $sth = $dbh->prepare($query)
          or syslog( 2, 'show_update_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my $status_str = 'disabled';
        if ($is_active) {
            $status_str = 'enabled';
        }
        if ( $sth->execute(@args) ) {
            my $msg = $self->{lh}->maketext( "Alias [_1] (#[_2]) [_3].", $alias_name, $alias_id, $status_str );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_update_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to set Alias [_1] (#[_2]) [_3].", $alias_name, $alias_id, $status_str );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }

    # clean target string
    if ($target) {
        $target = join( ",", split( /\s*,\s*/, $target ) );
    }
    if ( $target && !&VBoxAdm::Utils::is_valid_addresses_rfc822($target) ) {
        my $msg = $self->{lh}->maketext("Invalid address in destination!");
        $self->add_message( 'error', $msg );
        $msg1 .= $msg . ' ';
    }
    elsif ( $alias_id && $target ) {
        my $query = "UPDATE aliases SET goto = ? WHERE id = ?";
        my $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_mailboxes - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $target, $alias_id ) ) {
            my $msg .= $self->{lh}->maketext( "Alias [_1] (#[_2]) redirected to [_3].", $alias_name, $alias_id, $target );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_mailboxes - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", ( $target, $alias_id ) ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to redirect Alias [_1] (#[_2]) to [_3].", $alias_name, $alias_id, $target );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }
=cut

    return;
}

sub read {
    warn "Not yet implemented!\n";
    return;

    # TODO return a single entry
}

sub list {
    warn "Not yet implemented!\n";
    return;

    # TODO return a list of all entries matching the criteria
}

1;
__END__
