package VBoxAdm::Frontend;

# TODO use captacha plugin to protect login
# TODO use require ssl
# TODO HIGH enforce lower case usernames and domain

use base 'CGI::Application';

use strict;
use warnings;

# Neede for database connection
use CGI::Application::Plugin::DBH (qw/dbh_config dbh/);

# http://search.cpan.org/~ceeshek/CGI-Application-Plugin-TT-1.05/lib/CGI/Application/Plugin/TT.pm
use CGI::Application::Plugin::TT;

# http://search.cpan.org/~dhorne/CGI-Application-Plugin-RequireSSL-0.04/lib/CGI/Application/Plugin/RequireSSL.pm
use CGI::Application::Plugin::RequireSSL;

# http://search.cpan.org/~cromedome/CGI-Application-Plugin-CAPTCHA-0.01/lib/CGI/Application/Plugin/CAPTCHA.pm
use CGI::Application::Plugin::CAPTCHA;

# http://search.cpan.org/~ceeshek/CGI-Application-Plugin-Authorization-0.07/lib/CGI/Application/Plugin/Authorization.pm
# http://search.cpan.org/~ceeshek/CGI-Application-Plugin-Authorization-0.07/lib/CGI/Application/Plugin/Authorization/Driver/DBI.pm
# http://search.cpan.org/~silasmonk/CGI-Application-Plugin-Authentication-0.18/lib/CGI/Application/Plugin/Authentication.pm
use CGI::Application::Plugin::Authentication;

use Config::Std;

#use VBoxAdm::Frontend::Admin '@VERSION@';

our $VERSION = '@VERSION@';

__PACKAGE__->authen->config(
     DRIVER => [ 'DBI',
         TABLES       => ['mailboxes', 'domains'],
         CONSTRAINTS => {
             "CONCAT(mailboxes.local_part,'\@',domains.name)"		=> '__CREDENTIAL_1__',
             'mailboxes.password' => '__CREDENTIAL_2__', # TODO passwords should be 'encrypted' MD5:
             'mailboxes.is_active'		=> '1',
             'domains.is_active'			=> '1',
             '(mailboxes.is_superadmin OR mailboxes.is_domainadmin) AND 1' => '1',
         },
     ],
     LOGOUT_RUNMODE => 'public_login',
     LOGIN_RUNMODE => 'public_login',
);

############################################
# Usage      : ????
# Purpose    : ????
# Returns    : ????
# Parameters : ????
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub setup {
    my $self = shift;
    $self->start_mode('public_login');
    $self->run_modes(
        'public_login'          => 'show_login',
        'domains'        => 'show_domains',
        'create_domain'  => 'show_create_domain',
        'add_domain'     => 'show_add_domain',
        'remove_domain'  => 'show_remove_domain',
        'domain_aliases' => 'show_domain_aliases',
        'create_domain_alias'	=> 'show_create_domain_alias',
        'add_domain_alias' => 'show_add_domain_alias',
        'aliases'        => 'show_aliases',
        'mailboxes'      => 'show_mailboxes',
        'create_mailbox' => 'show_create_mailbox',
        'log'            => 'show_log',
        'create_captcha' => 'show_captcha',
        'admins'         => 'show_admins',
    );
    $self->authen->protected_runmodes(qr/^(?!public_)/);

    #
    # Configuration
    #
    # Valid config file locations to try
    my @conffile_locations = qw(
      vboxadm.conf
      conf/vboxadm.conf
      /etc/vboxadm/vboxadm.conf
    );

    my ( %config, $conffile_used );

    # Try all config file locations
    foreach my $loc (@conffile_locations) {
        if ( -r $loc ) {
            $conffile_used = $loc;
            read_config $loc => %config;
            last;
        }
    }

    #
    # Database
    #
    my $user = $config{'default'}{'dbuser'} || 'root';
    my $pass = $config{'default'}{'dbpass'} || 'root';
    my $db   = $config{'default'}{'dbdb'}   || 'vboxadm';
    my $port = $config{'default'}{'dbport'} || 3306;
    my $host = $config{'default'}{'dbhost'} || 'localhost';
    my $dsn  = "DBI:mysql:database=$db;user=$user;password=$pass;host=$host;port=$port";

    # Connect to DBI database, same args as DBI->connect();
    $self->dbh_config($dsn);

    #
    # Templates
    #
    $self->tt_config(
        TEMPLATE_OPTIONS => {
            INCLUDE_PATH => [ 'tpl', '../tpl', '/var/lib/vboxadm/tpl' ],
            POST_CHOMP   => 1,
            FILTERS => { 'currency' => sub { sprintf( '%0.2f', @_ ) }, }
        }
    );

    #
    # Captachas
    #
    $self->captcha_config(
        IMAGE_OPTIONS => {
            width    => 220,
            height   => 60,
            lines    => 10,
            font     => "/usr/share/fonts/truetype/freefont/FreeSans.ttf",
            ptsize   => 18,
            bgcolor  => "#FFCC00",
            scramble => 1,
        },
        CREATE_OPTIONS   => [ 'ttf', 'rect' ],
        PARTICLE_OPTIONS => [300],
    );

}

sub show_captcha {
    my $self = shift;
    return $self->captcha_create;

}

sub tt_post_process {
    my $self    = shift;
    my $htmlref = shift;

    # clean up the resulting HTML
    require HTML::Clean;
    my $h = HTML::Clean->new($htmlref);
    $h->strip;
    my $newref = $h->data;
    $$htmlref = $$newref;
    return;
}

sub teardown {
    my $self = shift;

    # Disconnect when done
    $self->dbh->disconnect();
}

sub show_login {
    my $self = shift;

    my %params = ( title => 'VBoxAdm Login', nonavigation => 1, );

    return $self->tt_process( 'login.tpl', \%params );
}

sub show_create_domain {

    # TODO HIGH only super-admin here!
    my $self = shift;

    my %params = ( 'title' => 'Add Domain', );

    return $self->tt_process( 'domain-create.tpl', \%params );
}

sub show_create_domain_alias {
	  # TODO HIGH only super-admin here!
    my $self = shift;
    
		# Get our database connection
    my $dbh = $self->dbh();

		# TODO HIGH if domainadmin only one domain here
    my $query = "SELECT id,name,is_active FROM domains ORDER BY name";
    my $sth   = $dbh->prepare($query);
    $sth->execute();

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }

    my %params = (
        'title'   => 'Add Domain Alias',
        'domains' => \@domains,
    );

    return $self->tt_process( 'domain-alias-create.tpl', \%params );
}

sub show_add_domain_alias {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_alias             = lc( $q->param('domain_alias') );
    my $domain_id = $q->param('domain');

    if ( $domain_alias && $domain_id ) {
        my $query = "INSERT INTO domain_aliases (name,domain_id,is_active) VALUES(?,?,1)";
        my $sth   = $dbh->prepare($query);
        if($sth->execute($domain_alias,$domain_id)) {
        	# TODO add log entry
        } else {
        	# TODO add log entry
        }
        $sth->finish();

        # TODO redirect to show_domains
    }
    else {

        # TODO show error on domain-create.tpl
    }

    my %params = ( 'title' => 'Add Domain Alias', );

    return $self->tt_process( 'domain-alias-create.tpl', \%params );
}

sub show_create_mailbox {

    # TODO HIGH only super-admin here!
    my $self = shift;
    
    # Get our database connection
    my $dbh = $self->dbh();

		# TODO HIGH if domainadmin only one domain here
    my $query = "SELECT id,name,is_active FROM domains ORDER BY name";
    my $sth   = $dbh->prepare($query);
    $sth->execute();

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }

    my %params = (
        'title'   => 'Add Mailbox',
        'domains' => \@domains,
    );

    return $self->tt_process( 'mailbox-create.tpl', \%params );
}

sub show_add_mailbox {
    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_id             = $q->param('domain');
    my $username					 = lc( $q->param('username') );
    my $password = $q->param('password');
    my $password_2 = $q->param('password_2');
    my $name = lc($q->param('name'));
    my $is_active = $q->param('is_active');
    my $send_welcome_mail = $q->param('send_welcome_mail');

    if ( $domain_id && $username && $password && $name && $password eq $password_2) {
        my $query = "INSERT INTO mailboxes (domain_id,local_part,password,is_active) VALUES(?,?,?,?)";
        my $sth   = $dbh->prepare($query);
        if($sth->execute($domain_id,$username,$password,$is_active)) {
        	# TODO add log entry
        } else {
        	# TODO add log entry
        }
        $sth->finish();

        # TODO redirect to show_domains
    }
    else {

        # TODO show error on domain-create.tpl
    }

    my %params = ( 'title' => 'Add Mailbox', );

    return $self->tt_process( 'mailbox-create.tpl', \%params );
}

sub show_add_domain {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain             = lc( $q->param('domain') );
    my $create_domainadmin = $q->param('create_domainadmin');

    if ( $domain && $create_domainadmin ) {
        my $query = "INSERT INTO domains (name,is_active) VALUES(?,1)";
        my $sth   = $dbh->prepare($query);
        if($sth->execute($domain)) {
        	# TODO add log entry
        } else {
        	# TODO add log entry
        }
        $sth->finish();

        # TODO redirect to show_domains
    }
    else {

        # TODO show error on domain-create.tpl
    }

    my %params = ( 'title' => 'Add Domain', );

    return $self->tt_process( 'domain-create.tpl', \%params );
}

sub show_domains {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT id,name,is_active FROM domains ORDER BY name";
    my $sth   = $dbh->prepare($query);
    $sth->execute();

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }

    my %params = (
        'title'   => 'VBoxAdm Domains',
        'domains' => \@domains,
    );

    return $self->tt_process( 'domains.tpl', \%params );
}

sub show_aliases {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    my $query =
      "SELECT a.id,a.local_part,a.is_active,a.goto,d.name FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id ORDER BY a.local_part,d.name";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    my @aliases = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @aliases, { id => $row[0], local_part => $row[1], is_active => $row[2], target => $row[3], domain => $row[4], } );
    }

    my %params = (
        'title'   => 'VBoxAdm Aliases',
        'aliases' => \@aliases,
    );

    return $self->tt_process( 'aliases.tpl', \%params );
}

sub show_domain_aliases {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT da.id,da.name,da.is_active,d.name FROM domain_aliases AS da LEFT JOIN domains AS d ON da.domain_id = d.id ORDER BY da.name";
    my $sth   = $dbh->prepare($query);
    $sth->execute();

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], target => $row[3], } );
    }

    my %params = (
        'title'   => 'VBoxAdm Domain-Aliases',
        'domains' => \@domains,
    );

    return $self->tt_process( 'domain-aliases.tpl', \%params );
}

sub show_mailboxes {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    my $query =
"SELECT m.id,m.local_part,m.is_active,d.name,m.max_msg_size,m.is_on_vacation,m.quota FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id ORDER BY m.local_part,d.name";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    my @mailboxes = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push(
            @mailboxes,
            {
                id             => $row[0],
                local_part     => $row[1],
                is_active      => $row[2],
                domain         => $row[3],
                max_msg_size   => $row[4],
                is_on_vacation => $row[5],
                quota          => $row[6],
            }
        );
    }

    my %params = (
        'title'     => 'VBoxAdm Aliases',
        'mailboxes' => \@mailboxes,
    );

    return $self->tt_process( 'mailboxes.tpl', \%params );
}

sub show_admins {

    # TODO HIGH only super-admin here!
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    my $query =
"SELECT m.id,m.local_part,m.is_active,d.name,m.is_domainadmin,m.is_superadmin FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.is_superadmin OR m.is_domainadmin ORDER BY m.is_superadmin,m.is_domainadmin,m.local_part,d.name";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    my @admins = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push(
            @admins,
            {
                id             => $row[0],
                local_part     => $row[1],
                is_active      => $row[2],
                domain         => $row[3],
                is_domainadmin => $row[4],
                is_superadmin  => $row[5],
            }
        );
    }

    my %params = (
        'title'  => 'VBoxAdm Admins',
        'admins' => \@admins,
    );

    return $self->tt_process( 'admins.tpl', \%params );
}

sub show_mailbox {

    # TODO HIGH only domain- and super-admin here!
    my $self = shift;
}

sub show_log {
    my $self = shift;

    # TODO HIGH only allow super admin here!

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT * FROM log ORDER BY ts DESC LIMIT 30";
    my $sth   = $dbh->prepare($query);
    $sth->execute();

    my @log = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @log, { ts => $row[0], msg => $row[1], } );
    }

    my %params = (
        'title' => 'VBoxAdm Log',
        'log'   => \@log,
    );

    return $self->tt_process( 'log.tpl', \%params );
}

1;

__END__

=head1 NAME

VBoxAdm::Frontend - Frontend for VBoxAdm

=head1 VERSION

This documentation refers to VBoxAdm::Frontend version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Frontend;
		my $vadm = VBoxAdm::Frontend->new();
		$vadm->run();

=head1 DESCRIPTION

A full description of the module and its features.
May include numerous subsections (i.e., =head2, =head3, etc.).

=head1 SUBROUTINES/METHODS

A separate section listing the public components of the module's interface.
These normally consist of either subroutines that may be exported, or methods
that may be called on objects belonging to the classes that the module provides.
Name the section accordingly.

In an object-oriented module, this section should begin with a sentence of the
form "An object of this class represents...", to give the reader a high-level
context to help them understand the methods that are subsequently described.

=head1 DIAGNOSTICS

A list of every error and warning message that the module can generate
(even the ones that will "never happen"), with a full explanation of each
problem, one or more likely causes, and any suggested remedies.
(See also "Documenting Errors" in Chapter 13.)

=head1 CONFIGURATION AND ENVIRONMENT

A full explanation of any configuration system(s) used by the module,
including the names and locations of any configuration files, and the
meaning of any environment variables or properties that can be set. These
descriptions must also include details of any configuration language used.
(See also "Configuration Files" in Chapter 19.)

=head1 DEPENDENCIES

A list of all the other modules that this module relies upon, including any
restrictions on versions, and an indication of whether these required modules are
part of the standard Perl distribution, part of the module's distribution,
or must be installed separately.

=head1 INCOMPATIBILITIES

A list of any modules that this module cannot be used in conjunction with.
This may be due to name conflicts in the interface, or competition for
system or program resources, or due to internal limitations of Perl
(for example, many modules that use source code filters are mutually
incompatible).

=head1 BUGS AND LIMITATIONS

A list of known problems with the module, together with some indication of
whether they are likely to be fixed in an upcoming release.

Also a list of restrictions on the features the module does provide:
data types that cannot be handled, performance issues and the circumstances
in which they may arise, practical limitations on the size of data sets,
special cases that are not (yet) handled, etc.

There are no known bugs in this module.
Please report problems to 

Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut
