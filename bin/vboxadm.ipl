#!/usr/bin/perl
use strict;
use warnings;

use lib '@LIBDIR@';

# TODO allow changing the pw_lock flag on mailboxes

use English qw(-no_match_vars);

use CPAN;
use DBI;
use Data::Dumper;
use Getopt::Long;
use File::Temp;
use Config::Std;
use Net::Domain;
use Net::SMTP;
use Net::POP3;
use Net::IMAP::Client;
use Sys::Syslog;
use Text::Levenshtein qw(distance);

use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';
use VBoxAdm::Migration '@VERSION@';
use VBoxAdm::SaltedHash '@VERSION@';
use VBoxAdm::Password '@VERSION@';
use VBoxAdm::Model::Alias '@VERSION@';
use VBoxAdm::Model::AWL '@VERSION@';
use VBoxAdm::Model::Domain '@VERSION@';
use VBoxAdm::Model::DomainAlias '@VERSION@';
use VBoxAdm::Model::Mailbox '@VERSION@';
use VBoxAdm::Model::User '@VERSION@';
use VBoxAdm::Model::VacationBlacklist '@VERSION@';
use VBoxAdm::Model::MessageQueue '@VERSION@';
use VBoxAdm::L10N '@VERSION@';

binmode( STDIN, ':utf8' );

openlog( 'vboxadm-cli', 'ndelay,nofatal', 'mail' );

my ( $conffile_used, %config, @modes, $opts );
$opts = {};

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
  @CFGDIR@/vboxadm/vboxadm.conf
);

GetOptions(
    'verbose|v+'    => \$opts->{Verbose},
    'dry|d!'        => \$opts->{Dry},
    'quiet|q!'      => \$opts->{Quiet},
    'force|f!'      => \$opts->{Force},
    'name|n=s'      => \$opts->{Name},
    'source|s=s'    => \$opts->{Source},
    'source-db|d=s' => \$opts->{SourceDb},
    'truncate!'     => \$opts->{Truncate},
    'bootstrap!'    => \$opts->{Bootstrap},
    '<>'            => sub { my $m = shift; push( @modes, lc($m) ); },

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
    'active|a=i'      => \$opts->{IsActive},
    'goto|g=s'        => \$opts->{Goto},
    'password|p=s'    => sub { shift; my $p = shift; $opts->{Password} = $p; $opts->{PasswordAgain} = $p; },
    'maxmsgsize|m=i'  => \$opts->{MaxMsgSize},
    'siteadmin=s'     => \$opts->{IsSiteadmin},
    'domainadmin=s'   => \$opts->{IsDomainadmin},
    'sakillscore|k=i' => \$opts->{SAKillScore},
    'saactive=i'      => \$opts->{SAActive},
    'vacation=i'      => \$opts->{IsOnVacation},
    'vacsubj=s'       => \$opts->{VacationSubject},
    'vacmsg=s'        => \$opts->{VacationMessage},
    'vacstart=s'      => \$opts->{VacationStart},
    'vacend=s'        => \$opts->{VacationEnd},
    'forcepass!'      => \$opts->{ForcePassword},
) or die("Unknown Command");

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

$config{'default'}{'dbhost'}   ||= 'localhost';
$config{'default'}{'dbuser'}   ||= 'vboxadm';
$config{'default'}{'dbpass'}   ||= '';
$config{'default'}{'dbport'}   ||= 3306;
$config{'default'}{'dbdb'}     ||= 'vboxadm';
$config{'default'}{'pwscheme'} ||= 'sha256';

print "# VBoxAdm CLI\n" unless $config{'quiet'};

#
# Database connection
#
my $dsn =
"DBI:mysql:host=$config{'default'}{'dbhost'};database=$config{'default'}{'dbdb'};port=$config{'default'}{'dbport'};user=$config{'default'}{'dbuser'};password=$config{'default'}{'dbpass'}";
my $dbh = &VBoxAdm::DB::connect( $dsn, { RaiseError => 0, PrintError => 0, } );

if ( !$dbh ) {
    print "Could not connect to DB!\n";
    exit 1;
}
else {
    print "Connected to DB\n" if $config{'verbose'};
}

#
# Localization
#
my $Messages = VBoxAdm::Model::MessageQueue->new(
    {
        'lh'    => VBoxAdm::L10N->get_handle(),
        'lh_en' => VBoxAdm::L10N->get_handle('en'),
    }
);

#
# Authentication
#
# if user != root -> need to login as domainadmin
my $User = &check_login( $dbh, \%config, $Messages, $opts );
if ( !$User ) {
    print "Not authorized. Aborting.\n";
    exit 1;
}
else {
    print "Login validated\n" if $config{'verbose'};
}

$opts->{User} = $User;

my $arg_ref = {
    'dbh'          => $dbh,
    'User'         => $User,
    'MessageQueue' => $Messages,
    'Logger'       => \&syslog,
    'Config'       => \%config,
};
my $Alias             = VBoxAdm::Model::Alias->new($arg_ref);
my $AWL               = VBoxAdm::Model::AWL->new($arg_ref);
my $Domain            = VBoxAdm::Model::Domain->new($arg_ref);
my $DomainAlias       = VBoxAdm::Model::DomainAlias->new($arg_ref);
my $Mailbox           = VBoxAdm::Model::Mailbox->new($arg_ref);
my $VacationBlacklist = VBoxAdm::Model::VacationBlacklist->new($arg_ref);

# TODO help texts
my %help = (
    'help' => "Invocation: $0 <Module> <Action> <Parameter(s)> <Options>
VBoxAdm CLI Client, Version @VERSION@
Enter 'vboxadm help <module>' to get help for a module.
Available subcommands:
\talias - Manage Aliases
\tawl - Manage Auto-Whitelist
\tdomain - Manage Domains
\tdomainalias - Manage alias domains
\tmailbox - Manage users and mailboxes
\tvacbl - Manage Vacation Blacklist

Options:
-v - Verbose
-d - Dry
-q - Quiet
-f - Force
-n - Name
-s - Source-DB
-d - Destination-DB
--truncate - Truncate Destination before migration
--config - Location of config file
-a - Is active?
-g - Goto/Target
-p - Password
-m - Max. Msg. Size in MB
--siteadmin - Is Siteadmin?
--domainadmin - Is Domainadmin?
-k - SA Kill Score
--saactive - SA active?
--vacation - Is on vacation?
--vacsubj - Subject of Vacation reply
--vacmsg - Message of Vacation reply
--vacstart - Start of Vacation
--vacend - End of Vacation
--forcepass - Allow changing of locked passwords",
    'alias' => "Alias - Manage Aliases
Available subcommands:
\tadd <email> <goto>
\tdelete <email>
\tupdate <email> -a 1|0 -g <email>
\tlist",
    'awl' => "AWL - Manage Auto-Whitelist
Available subcommands:
\tadd <email>
\tupdate <email> -a 1|0
\t list
",
    'domain' => "Domain - Manage Domains
Available subcommands:
\tadd
\tdelete
\tupdate
\tlist
",
    'domainalias' => "DomainAlias - Manage alias domains
Available subcommands:
\tadd
\tdelete
\tupdate
\tlist",
    'mailbox' => "Mailbox - Manage users and mailboxes
Available subcommands:
\tadd
\tdelete
\tupdate
\tlist",
    'vacbl' => "Vacation Blacklist - Manage Vacation Blacklist
Available subcommands:
\tadd
\tdelete
\tlist",
);
my %actions = (
    'alias' => {
        'add' => sub {
            my $email = shift;
            my $goto  = shift;
            print "Add Alias.\n";
            if ( !$email ) {
                print "Need alias address\n";
                return;
            }
            if ( !$goto ) {
                print "Need goto address\n";
                return;
            }
            my ( $local_part, $domain ) = split /@/, $email;
            my $domain_id = $Domain->get_id($domain);
            if ( !$domain_id ) {
                print "Need valid domain\n";
                return;
            }
            $Alias->create( $local_part, $domain_id, $goto );
            display_messages( $Alias->msg() );
        },
        'update' => sub {
            my $email = shift;
            my $params;
            foreach my $key (qw(IsActive Goto)) {
                $params->{$key} = $opts->{$key} if defined( $opts->{$key} );
            }
            print "Update Alias.\n";
            $Alias->update( $Alias->get_id($email), $params );
            display_messages( $Alias->msg() );
        },
        'delete' => sub {
            my $email = shift;
            print "Delete Alias.\n";
            my $alias_id;
            if ( $email =~ m/^\d+$/ ) {
                $alias_id = $email;
            }
            else {
                $alias_id = $Alias->get_id($email);
            }
            $Alias->delete($alias_id);
            display_messages( $Alias->msg() );
        },
        'list' => sub {
            print "Listing Aliases:\n";
            my $format = "%i\t%s\@%s\t%s\t%i\n";
            print "ID\tEmail\tGoto\tIs Active\n";
            foreach my $alias ( $Alias->list() ) {
                printf( $format, @{$alias}{qw(id local_part domain goto is_active)} );
            }
            display_messages( $Alias->msg() );
          }
    },
    'awl' => {
        'add' => sub {
            my $email = shift;
            print "Add AWL.\n";
            $AWL->create($email);
            display_messages( $AWL->msg() );
        },
        'update' => sub {
            my $email = shift;
            my $params;
            $params->{Disabled} = !$opts->{IsActive} if defined( $opts->{IsActive} );
            print "Update AWL.\n";
            $AWL->update( $AWL->get_id($email), $params );
            display_messages( $AWL->msg() );
        },
        'list' => sub {
            print "Listing AWL entries:\n";
            my $format = "%i\t%s\t%i\t%s\n";
            print "ID\tEmail\tDisabled\tLast Seen\n";
            foreach my $awl ( $AWL->list() ) {
                printf( $format, @{$awl}{qw(id email disabled last_seen)} );
            }
            display_messages( $AWL->msg() );
        },
    },
    'domain' => {
        'add' => sub {
            my $domain = shift;
            print "Add Domain.\n";
            $Domain->create($domain);
            display_messages( $Domain->msg() );
        },
        'update' => sub {
            my $domain = shift;
            my $params;
            foreach my $key (qw(IsActive)) {
                $params->{$key} = $opts->{$key} if defined( $opts->{$key} );
            }
            print "Update Domain.\n";
            $Domain->update( $Domain->get_id($domain), $params );
            display_messages( $Domain->msg() );
        },
        'delete' => sub {
            my $domain = shift;
            print "Delete Domain.\n";
            $Domain->delete( $Domain->get_id($domain) );
            display_messages( $Domain->msg() );
        },
        'list' => sub {
            print "Listing Domains:\n";
            my $format = "%i\t%s\t%i\n";
            print "ID\tDomain\tIs Active\n";
            foreach my $domain ( $Domain->list() ) {
                printf( $format, @{$domain}{qw(id name is_active)} );
            }
            display_messages( $Domain->msg() );
        },
    },
    'domainalias' => {
        'add' => sub {
            my $domain    = shift;
            my $goto      = shift;
            my $domain_id = $Domain->get_id($goto);
            if ( !$domain_id ) {    # no known domain
                print "Error. Unknown Target Domain.\n";
                return;
            }
            print "Add DomainAlias.\n";
            $DomainAlias->create( $domain, $domain_id );
            display_messages( $DomainAlias->msg() );
        },
        'update' => sub {
            my $domain = shift;
            my $params;
            foreach my $key (qw(IsActive Goto)) {
                if ( defined( $opts->{$key} ) ) {
                    if ( $key eq 'Goto' ) {
                        $params->{$key} = $Domain->get_id( $opts->{$key} );
                    }
                    else {
                        $params->{$key} = $opts->{$key};
                    }
                }
            }
            print "Update DomainAlias $domain.\n";
            $DomainAlias->update( $DomainAlias->get_id($domain), $params );
            display_messages( $DomainAlias->msg() );
        },
        'delete' => sub {
            my $domain = shift;
            print "Delete DomainAlias.\n";
            $DomainAlias->delete( $DomainAlias->get_id($domain) );
            display_messages( $DomainAlias->msg() );
        },
        'list' => sub {
            print "Listing DomainAliases:\n";
            my $format = "%i\t%s\t%s\t%i\n";
            print "ID\tDomain\tGoto\tIs Active\n";
            foreach my $domain ( $DomainAlias->list() ) {
                printf( $format, @{$domain}{qw(id name domain_id is_active)} );
            }
            display_messages( $DomainAlias->msg() );
        },
    },
    'mailbox' => {
        'add' => sub {
            my $email = shift;
            my ( $local_part, $domain ) = split /@/, $email;
            my $domain_id = $Domain->get_id($domain);
            if ( !$domain_id ) {

                # Try to create domain first
                $Domain->create($domain);
                $domain_id = $Domain->get_id($domain);
            }
            if ( !$domain_id ) {
                print "Unknown Domain. Please create Domain first.\n";
                return;
            }
            my $params;
            foreach my $key (
                qw(
                Password PasswordAgain
                Name IsActive MaxMsgSize IsSiteadmin IsDomainadmin
                SAKillScore SAActive
                IsOnVacation VacationSubject VacationMessage VacationStart VacationEnd
                )
              )
            {
                $params->{$key} = $opts->{$key} if defined( $opts->{$key} );
            }
            print "Add User: $email\n";
            $Mailbox->create( $local_part, $domain_id, $params );
            display_messages( $Mailbox->msg() );
        },
        'update' => sub {
            my $email = shift;
            my $mailbox_id;
            if ( $email =~ m/^\d+$/ ) {
                $mailbox_id = $email;
            }
            else {
                $mailbox_id = $Mailbox->get_id($email);
            }
            my $params;
            foreach my $key (
                qw(
                Password PasswordAgain
                Name IsActive MaxMsgSize IsSiteadmin IsDomainadmin
                SAKillScore SAActive
                IsOnVacation VacationSubject VacationMessage VacationStart VacationEnd
                ForcePassword
                )
              )
            {
                $params->{$key} = $opts->{$key} if defined( $opts->{$key} );
            }

            # Longer vacation messages can not be given on the commandline, they may also be a file
            if ( $params->{VacationMessage} && -f $params->{VacationMessage} ) {
                $params->{VacationMessage} = &VBoxAdm::Utils::slurp( $params->{VacationMessage} );
            }
            print "Update User: $email\n";
            $Mailbox->update( $mailbox_id, $params );
            display_messages( $Mailbox->msg() );
        },
        'delete' => sub {
            my $email = shift;
            print "Delete User: $email\n";
            my $mailbox_id;
            if ( $email =~ m/^\d+$/ ) {
                $mailbox_id = $email;
            }
            else {
                $mailbox_id = $Mailbox->get_id($email);
            }
            $Mailbox->delete($mailbox_id);
            display_messages( $Mailbox->msg() );
        },
        'list' => sub {
            print "Listing Mailboxes:\n";
            my $format = "%i\t%s\@%s\t%s\t%f\t%i\t%i\t%i\n";
            print "ID\tEmail\tName\tSA-Kill-Score\tMax-Msg-Size\tIs Active\tIs Siteadmin\tIs Domainadmin\n";
            foreach my $mailbox ( $Mailbox->list() ) {
                printf( $format, @{$mailbox}{qw(id local_part domain sa_kill_score max_msg_size is_active is_siteadmin is_domainadmin)} );
            }
            display_messages( $Mailbox->msg() );
        },
    },
    'vacbl' => {
        'add' => sub {
            my $email = shift;
            print "Add VacationBlacklist entry: $email\n";
            $VacationBlacklist->create($email);
            display_messages( $VacationBlacklist->msg() );
        },
        'delete' => sub {
            my $email = shift;
            print "Delete VacationBlacklist entry.\n";
            $VacationBlacklist->delete( $VacationBlacklist->get_id($email) );
            display_messages( $VacationBlacklist->msg() );
        },
        'list' => sub {
            print "List VacationBlacklist entries:\n";
            print "ID\tEmail\n";
            my $format = "%i\t%s\@%s\n";
            foreach my $e ( $VacationBlacklist->list() ) {
                printf( $format, @{$e}{qw(id local_part domain)} );
            }
            display_messages( $VacationBlacklist->msg() );
        },
    },
);

my $module = shift @modes;
my $action = shift @modes;

if ( $module && $module eq 'help' ) {
    if ( $action && $help{$action} ) {
        print $help{$action} . "\n";
    }
    else {
        print $help{'help'} . "\n";
    }
}
elsif ( $module && $module eq 'migrate' ) {
    &migrate( $dbh, \%config, $opts );
}
elsif ( $module && $action && ref( $actions{$module}{$action} ) eq 'CODE' && ( $action eq 'list' || scalar(@modes) > 0 ) ) {
    &{ $actions{$module}{$action} }(@modes);
}
else {
    print "Invalid/Missing module and/or action.\n";
    if ( $module && $action && $actions{$module} ) {
        print "Did you mean " . get_similar_action( $action, $module, \%actions ) . "?\n";
    }
    elsif ( $module && !$actions{$module} ) {
        print "Did you mean " . get_similar_module( $module, \%actions ) . "?\n";
    }
}

$dbh->disconnect();
closelog();
exit 0;

__END__


